#!/bin/python

import argparse
import sys
import fractions

import random
from random import *

import math
from math import *


import matplotlib.pyplot as plt
import numpy as np

parser = argparse.ArgumentParser(description="Plot something")

parser.add_argument("--min", "-a", required=True)
parser.add_argument("--max", "-b", required=True)
parser.add_argument("--width", "-W")
parser.add_argument("--height", "-H")
parser.add_argument("--tickx", "-t")
parser.add_argument("--func", "-f", required=True, action="append")
parser.add_argument("--format")


args = parser.parse_args()

def safe_eval(func, x):
    # Doesn't actually provide protections against code execution.
    try:
        y = eval(func)
    except ValueError:
        return np.inf
    except ZeroDivisionError:
        return np.inf

    return y


def list_replace(l, x, y):
    out = []
    for item in l:
        if item == x:
            item = y
        if item is not None:
            out.append(item)
    return out

def sign(a):
    return not(a<0)

def asym_pos(func):
    x = 2**16
    y1 = safe_eval(func, x)
    y2 = safe_eval(func, x+1)

    if abs(y1 - y2) < 1/2**16:
        return eval(func)
    return None

def asym_neg(func):
    x = -2**16
    y1 = safe_eval(func, x)
    y2 = safe_eval(func, x+1)

    if abs(y1 - y2) < 1/2**16:
        return eval(func)
    return None

def mostly_max(x):
    x = list_replace(x, np.inf, None)
    x = sorted(x)
    x = x[:int(len(x)*PERCENT_PLOTTED)]
    return max(x)

def mostly_min(x):
    x = list_replace(x, np.inf, None)
    x = sorted(x)
    x = x[int(len(x)*(1-PERCENT_PLOTTED)):]
    return min(x)



def sin(x):
    return math.sin(math.radians(x))

def cos(x):
    return math.cos(math.radians(x))

def tan(x):
    return math.tan(math.radians(x))


xasyms = []
yasyms = []

funcs = args.func

funccount = len(funcs)
funcn = 1

if not(sys.stdout.isatty()):
    line_colour = (0xdd,)*3

    plt.rcParams["lines.color"] = "w"
    if funccount > 1:
        plt.rcParams["axes.prop_cycle"] = plt.cycler("color", [
            "#7777ff",
            "#77ff77",
            "#ff7777",
            "#77ffff",
            "#ff77ff",
            "#ffff77",
        ])
    else:
        plt.rcParams["axes.prop_cycle"] = plt.cycler("color", "w")
    plt.rcParams["axes.labelcolor"] = "w"
    plt.rcParams["axes.facecolor"] = "w"
    plt.rcParams["axes.edgecolor"] = "w"
    plt.rcParams["xtick.color"] = "w"
    plt.rcParams["ytick.color"] = "w"

    plt.rcParams["savefig.dpi"] = 250
    plt.rcParams["savefig.transparent"] = True

    plt.rcParams["axes.grid"] = True
    plt.rcParams["grid.color"] = "#666666"

STEPS = 10000
PERCENT_PLOTTED = .95
ASYM_GRAD_CUTOFF = 500
MIN = eval(args.min)
MAX = eval(args.max)
WIDTH = 8
HEIGHT = 6
if args.width:
    WIDTH = eval(args.width)
if args.height:
    HEIGHT = eval(args.height)

plt.figure(figsize=(WIDTH, HEIGHT))

if args.tickx:
    ticks = eval(args.tickx)
else:
    ticks = "."

delta = (MAX-MIN)/STEPS

global_yvals = []


ax = plt.gca()
ax.set_xlim([float(MIN), float(MAX)])
ax.yaxis.grid(False)

asym = False

for cfunc in funcs:
    func = None
    label = None
    if "," in cfunc:
        func, label = cfunc.split(",")
        if label == "":
            label = func
    else:
        func = cfunc

    x = MIN
    y = safe_eval(func, x)
    xvals = []
    yvals = []
    n = 0
    prog = 0
    for x in np.linspace(MIN, MAX, STEPS):
        try:
            oldy = y
            y = eval(func)

            if (abs(y - oldy) / delta > ASYM_GRAD_CUTOFF) and (sign(y) != sign(oldy)):
                plt.axvline(x, linewidth=1, linestyle="dotted")
                xasyms.append(x)
                yvals.append(np.inf)
                xvals.append(x)
                asym = True
            else:
                yvals.append(y)
                xvals.append(x)

        except ZeroDivisionError:
            plt.axvline(x)
        except ValueError:
            pass

        n += 1
        x += delta
        nprog = int(n*100/STEPS)

    print("{}: {}/{}".format(func, funcn, funccount), file=sys.stderr)
    funcn += 1

    if label:
        plt.plot(xvals, yvals, linewidth=1, label="${}$".format(label))
    else:
        plt.plot(xvals, yvals, linewidth=1.25)

    if label:
        leg = plt.legend()
        frame = leg.get_frame()

        if not(sys.stdout.isatty()):
            for text in leg.get_texts():
                text.set_color("#ffffff")
            frame.set_facecolor("#333333")
            frame.set_linewidth=(0)


    if asym_pos(func):
        plt.axhline(asym_pos(func), linewidth=1, linestyle="dotted")
        yasyms.append(asym_pos(func))

    if asym_neg(func):
        plt.axhline(asym_pos(func), linewidth=1, linestyle="dotted")
        yasyms.append(asym_pos(func))

    global_yvals += yvals

        

plt.axhline(0, linewidth=1, linestyle="dashed")


if asym:
    plt.gca().set_ylim(mostly_min(global_yvals), mostly_max(global_yvals))
else:
    plt.gca().set_ylim(min(global_yvals), max(global_yvals))


if ticks == "/":
    plt.xticks([])
    plt.yticks([])
elif ticks != ".":
    plt.xticks(np.arange(int(MIN), int(MAX)+0.0001, float(ticks)))


oldticksx = list(plt.xticks()[0])
oldticksx += xasyms
plt.xticks(oldticksx)

oldticksy = list(plt.yticks()[0])
oldticksy += yasyms
plt.yticks(oldticksy)

if sys.stdout.isatty():
    plt.show()
else:
    if args.format:
        plt.savefig(sys.stdout, bbox_inches="tight", format=args.format)
    else:
        plt.savefig(sys.stdout, bbox_inches="tight")
