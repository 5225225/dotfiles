#!/bin/python
import sys
import re
import os.path
import time
import uuid
import subprocess

NEW_REGEX = "me (?:in) (.*) to (.*)"
DATE_REGEX = "(([0-9]+) (year|month|week|day|hour|minute|second)s?)"

DATAPATH = os.path.expanduser("~/scripts/data/reminders/")

# This isn't strictly accurate, and is only an approximation.
# The long intervals are purely because I can, and they likely won't be
# massively accurate.

vals = dict()

vals["second"] = 1
vals["minute"] = vals["second"] * 60
vals["hour"] = vals["minute"] * 60
vals["day"] = vals["hour"] * 24
vals["week"] = vals["day"] * 7
vals["year"] = vals["day"] * 365
vals["month"] = vals["year"] / 12

def fuzzy_parse(s):
    running = 0

    matches = re.findall(DATE_REGEX, s)
    for match in matches:
        running += int(match[1]) * vals[match[2]]
    
    return int(running)

args = " ".join(sys.argv[1:])

if args.startswith("me"):
    match = re.match(NEW_REGEX, args)
    t, item = match.groups()
    deltasec = fuzzy_parse(t)
    
    newtime = int(time.time() + deltasec)
    
    fname = DATAPATH + uuid.uuid4().hex
    with open(fname, "w") as f:
        f.write(str(newtime) + ":" + item)
elif args.startswith("check"):
    torm = []
    for fn in os.listdir(DATAPATH):
        with open(DATAPATH + fn) as f:
            t, item = f.read().split(":")
            t = int(t)
            if time.time() > t:
                 subprocess.call(["notify-send", "reminder", item])
                 torm.append(fn)

    for fn in torm:
        os.remove(fn)

else:
    print("Don't know what you mean")
